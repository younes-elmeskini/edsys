// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VISITOR
}

enum Status {
  RECRUITED
  FARTHER
  EMPLOYED
  SEARCHING
}

model User {
  userId     String       @id @default(cuid())
  userName   String?
  email      String?      @unique
  password   String?
  role       Role
  avatar     String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  resetToken resetToken[]
}

model Client {
  clientId      String          @id @default(cuid())
  firstName     String?
  lastName      String?
  phone         Int?
  email         String         @unique
  education     String?
  Status        Status
  academicYear  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  self_employed self_employed[]
  Further       Further[]
  searching     searching[]
  Recruited     Recruited[]
}

model Recruited {
  recruitedId String   @id @default(cuid())
  clientId    String
  title       String?
  campany     String?
  position    String?
  startYear   String?
  workCity    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      Client   @relation(fields: [clientId], references: [clientId])
}

model Further {
  futherId  String   @id @default(cuid())
  clientId  String
  school    String?
  furtherEd String?
  city      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [clientId])
}

model self_employed {
  employedId   String   @id @default(cuid())
  clientId     String
  selfEmployed String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  client       Client   @relation(fields: [clientId], references: [clientId])
}

model searching {
  searchId  String   @id @default(cuid())
  clientId  String
  duration  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [clientId])
}

model resetToken {
  resetTokenId String   @id @default(cuid())
  token        String   @unique
  userId       String
  expiredAt    DateTime
  user         User     @relation(fields: [userId], references: [userId])
}
