// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VISITOR
}

enum Status {
  RECRUITED
  FARTHER
  EMPLOYED
  SEARCHING
}

model User {
  userId    String   @id @default(cuid())
  userName  String?
  email     String?  @unique
  password  String?
  role      Role
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  clientId     String   @id @default(cuid())
  fistName     String?
  lastName     String?
  phone        String?
  email        String?  @unique
  education    String?
  Status       Status
  academicYear String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  self_employed self_employed[]
  Further Further[]
  searching searching[]
  Recruited Recruited[]
}

model Recruited {
  recruitedId     String   @id @default(cuid())
  title          String?
  campany        String?
  position       String?
  startYear String?
  workCity           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  clieantId      String?
  client         Client? @relation(fields: [clieantId], references: [clientId])
}

model Further {
  futherId    String  @id @default(cuid())
  school    String?
  furtherEd String?
  city      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claientId String?
  client    Client? @relation(fields: [claientId], references: [clientId])
}

model self_employed {
  employedId    String   @id @default(cuid())
  selfEmployed String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clieantId   String?
  client      Client? @relation(fields: [clieantId], references: [clientId])
}

model searching {
  searchId String   @id @default(cuid())
  duration    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  celientId String?
  client    Client? @relation(fields: [celientId], references: [clientId])
}